// Copyright 2022-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file connectrpc/eliza/v1/eliza.proto (package connectrpc.eliza.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file connectrpc/eliza/v1/eliza.proto.
 */
export const file_connectrpc_eliza_v1_eliza: GenFile = /*@__PURE__*/
  fileDesc("Ch9jb25uZWN0cnBjL2VsaXphL3YxL2VsaXphLnByb3RvEhNjb25uZWN0cnBjLmVsaXphLnYxIk4KClNheVJlcXVlc3QSEAoIc2VudGVuY2UYASABKAkSLgoGdm9sdW1lGAIgASgOMh4uY29ubmVjdHJwYy5lbGl6YS52MS5TYXlWb2x1bWUiHwoLU2F5UmVzcG9uc2USEAoIc2VudGVuY2UYASABKAkiWAoPQ29udmVyc2VSZXF1ZXN0EhAKCHNlbnRlbmNlGAEgASgJEjMKBnZvbHVtZRgCIAEoDjIjLmNvbm5lY3RycGMuZWxpemEudjEuQ29udmVyc2VWb2x1bWUiJAoQQ29udmVyc2VSZXNwb25zZRIQCghzZW50ZW5jZRgBIAEoCSIgChBJbnRyb2R1Y2VSZXF1ZXN0EgwKBG5hbWUYASABKAkiJQoRSW50cm9kdWNlUmVzcG9uc2USEAoIc2VudGVuY2UYASABKAkqUQoJU2F5Vm9sdW1lEhoKFlNBWV9WT0xVTUVfVU5TUEVDSUZJRUQQABITCg9TQVlfVk9MVU1FX0xPVUQQARITCg9TQVlfVk9MVU1FX1NPRlQQAiplCg5Db252ZXJzZVZvbHVtZRIfChtDT05WRVJTRV9WT0xVTUVfVU5TUEVDSUZJRUQQABIYChRDT05WRVJTRV9WT0xVTUVfTE9VRBABEhgKFENPTlZFUlNFX1ZPTFVNRV9TT0ZUEAIynAIKDEVsaXphU2VydmljZRJNCgNTYXkSHy5jb25uZWN0cnBjLmVsaXphLnYxLlNheVJlcXVlc3QaIC5jb25uZWN0cnBjLmVsaXphLnYxLlNheVJlc3BvbnNlIgOQAgESXQoIQ29udmVyc2USJC5jb25uZWN0cnBjLmVsaXphLnYxLkNvbnZlcnNlUmVxdWVzdBolLmNvbm5lY3RycGMuZWxpemEudjEuQ29udmVyc2VSZXNwb25zZSIAKAEwARJeCglJbnRyb2R1Y2USJS5jb25uZWN0cnBjLmVsaXphLnYxLkludHJvZHVjZVJlcXVlc3QaJi5jb25uZWN0cnBjLmVsaXphLnYxLkludHJvZHVjZVJlc3BvbnNlIgAwAWIGcHJvdG8z");

/**
 * SayRequest is a single-sentence request.
 *
 * @generated from message connectrpc.eliza.v1.SayRequest
 */
export type SayRequest = Message<"connectrpc.eliza.v1.SayRequest"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;

  /**
   * @generated from field: connectrpc.eliza.v1.SayVolume volume = 2;
   */
  volume: SayVolume;
};

/**
 * Describes the message connectrpc.eliza.v1.SayRequest.
 * Use `create(SayRequestSchema)` to create a new message.
 */
export const SayRequestSchema: GenMessage<SayRequest> = /*@__PURE__*/
  messageDesc(file_connectrpc_eliza_v1_eliza, 0);

/**
 * SayResponse is a single-sentence response.
 *
 * @generated from message connectrpc.eliza.v1.SayResponse
 */
export type SayResponse = Message<"connectrpc.eliza.v1.SayResponse"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;
};

/**
 * Describes the message connectrpc.eliza.v1.SayResponse.
 * Use `create(SayResponseSchema)` to create a new message.
 */
export const SayResponseSchema: GenMessage<SayResponse> = /*@__PURE__*/
  messageDesc(file_connectrpc_eliza_v1_eliza, 1);

/**
 * ConverseRequest is a single sentence request sent as part of a
 * back-and-forth conversation.
 *
 * @generated from message connectrpc.eliza.v1.ConverseRequest
 */
export type ConverseRequest = Message<"connectrpc.eliza.v1.ConverseRequest"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;

  /**
   * @generated from field: connectrpc.eliza.v1.ConverseVolume volume = 2;
   */
  volume: ConverseVolume;
};

/**
 * Describes the message connectrpc.eliza.v1.ConverseRequest.
 * Use `create(ConverseRequestSchema)` to create a new message.
 */
export const ConverseRequestSchema: GenMessage<ConverseRequest> = /*@__PURE__*/
  messageDesc(file_connectrpc_eliza_v1_eliza, 2);

/**
 * ConverseResponse is a single sentence response sent in answer to a
 * ConverseRequest.
 *
 * @generated from message connectrpc.eliza.v1.ConverseResponse
 */
export type ConverseResponse = Message<"connectrpc.eliza.v1.ConverseResponse"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;
};

/**
 * Describes the message connectrpc.eliza.v1.ConverseResponse.
 * Use `create(ConverseResponseSchema)` to create a new message.
 */
export const ConverseResponseSchema: GenMessage<ConverseResponse> = /*@__PURE__*/
  messageDesc(file_connectrpc_eliza_v1_eliza, 3);

/**
 * IntroduceRequest asks Eliza to introduce itself to the named user.
 *
 * @generated from message connectrpc.eliza.v1.IntroduceRequest
 */
export type IntroduceRequest = Message<"connectrpc.eliza.v1.IntroduceRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message connectrpc.eliza.v1.IntroduceRequest.
 * Use `create(IntroduceRequestSchema)` to create a new message.
 */
export const IntroduceRequestSchema: GenMessage<IntroduceRequest> = /*@__PURE__*/
  messageDesc(file_connectrpc_eliza_v1_eliza, 4);

/**
 * IntroduceResponse is one sentence of Eliza's introductory monologue.
 *
 * @generated from message connectrpc.eliza.v1.IntroduceResponse
 */
export type IntroduceResponse = Message<"connectrpc.eliza.v1.IntroduceResponse"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;
};

/**
 * Describes the message connectrpc.eliza.v1.IntroduceResponse.
 * Use `create(IntroduceResponseSchema)` to create a new message.
 */
export const IntroduceResponseSchema: GenMessage<IntroduceResponse> = /*@__PURE__*/
  messageDesc(file_connectrpc_eliza_v1_eliza, 5);

/**
 * @generated from enum connectrpc.eliza.v1.SayVolume
 */
export enum SayVolume {
  /**
   * @generated from enum value: SAY_VOLUME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SAY_VOLUME_LOUD = 1;
   */
  LOUD = 1,

  /**
   * @generated from enum value: SAY_VOLUME_SOFT = 2;
   */
  SOFT = 2,
}

/**
 * Describes the enum connectrpc.eliza.v1.SayVolume.
 */
export const SayVolumeSchema: GenEnum<SayVolume> = /*@__PURE__*/
  enumDesc(file_connectrpc_eliza_v1_eliza, 0);

/**
 * @generated from enum connectrpc.eliza.v1.ConverseVolume
 */
export enum ConverseVolume {
  /**
   * @generated from enum value: CONVERSE_VOLUME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CONVERSE_VOLUME_LOUD = 1;
   */
  LOUD = 1,

  /**
   * @generated from enum value: CONVERSE_VOLUME_SOFT = 2;
   */
  SOFT = 2,
}

/**
 * Describes the enum connectrpc.eliza.v1.ConverseVolume.
 */
export const ConverseVolumeSchema: GenEnum<ConverseVolume> = /*@__PURE__*/
  enumDesc(file_connectrpc_eliza_v1_eliza, 1);

/**
 * ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
 * for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
 * the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
 * superficiality of human-computer communication. DOCTOR simulates a
 * psychotherapist, and is commonly found as an Easter egg in emacs
 * distributions.
 *
 * @generated from service connectrpc.eliza.v1.ElizaService
 */
export const ElizaService: GenService<{
  /**
   * Say is a unary RPC. Eliza responds to the prompt with a single sentence.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.Say
   */
  say: {
    methodKind: "unary";
    input: typeof SayRequestSchema;
    output: typeof SayResponseSchema;
  },
  /**
   * Converse is a bidirectional RPC. The caller may exchange multiple
   * back-and-forth messages with Eliza over a long-lived connection. Eliza
   * responds to each ConverseRequest with a ConverseResponse.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.Converse
   */
  converse: {
    methodKind: "bidi_streaming";
    input: typeof ConverseRequestSchema;
    output: typeof ConverseResponseSchema;
  },
  /**
   * Introduce is a server streaming RPC. Given the caller's name, Eliza
   * returns a stream of sentences to introduce itself.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.Introduce
   */
  introduce: {
    methodKind: "server_streaming";
    input: typeof IntroduceRequestSchema;
    output: typeof IntroduceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_connectrpc_eliza_v1_eliza, 0);

